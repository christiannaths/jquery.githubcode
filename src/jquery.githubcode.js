// Generated by CoffeeScript 1.4.0

(function($, window) {
  var fetchCode, highlightCode, insertCode;
  $.fn.githubcode = function(options) {
    options = $.extend({}, $.fn.githubcode.options, options);
    return this.each(function() {
      var $this, step1, step2, step3;
      $this = $(this);
      $.extend($this.data(), options);
      step1 = fetchCode($this);
      step2 = step1.pipe(function(msg) {
        return highlightCode(msg);
      });
      return step3 = step2.pipe(function(msg) {
        return insertCode(msg);
      });
    });
  };
  $.fn.githubcode.options = {
    'api': 'https://api.github.com/repos',
    'debug': false,
    afterInsert: function() {}
  };
  fetchCode = function($this) {
    var api, codeblocks, data_type, deferred, method, path, pathExists, ref, refExists, refIsHash, repo, repoExists, request_url, sha1Test;
    codeblocks = new Array();
    deferred = new $.Deferred();
    api = $this.data('api');
    repo = $this.data('repo');
    path = $this.data('path');
    ref = $this.data('ref');
    repoExists = repo != null;
    pathExists = path != null;
    refExists = ref != null;
    sha1Test = /^[0-9a-f]{40}$/i;
    refIsHash = sha1Test.test(ref);
    if (repoExists && refIsHash) {
      method = 'commits';
      request_url = [api, repo, method, ref].join('/');
      if ($this.data('debug') === true) {
        data_type = 'json';
      }
      if ($this.data('debug') === true) {
        request_url = "test/data/diffs.json";
      }
    } else if (repoExists && pathExists && !refIsHash) {
      method = 'contents';
      request_url = [api, repo, method, path].join('/') + ("?ref=" + (ref || 'master'));
      if ($this.data('debug') === true) {
        data_type = 'html';
      }
      if ($this.data('debug') === true) {
        request_url = "test/data/single.html";
      }
    } else {
      console.error("Options provided were not sufficient to make the request. Aborting.");
    }
    $.ajax({
      url: request_url,
      type: 'GET',
      dataType: data_type,
      headers: {
        'Accept': 'application/vnd.github.v3.raw'
      },
      success: function(response) {
        var codeblock;
        if (typeof response === 'object') {
          $.each(response.files, function(i, file) {
            var codeblock;
            codeblock = new Object();
            codeblock.filename = file.filename;
            codeblock.code = file.patch;
            if ((path != null) && path === file.filename) {
              return codeblocks.push(codeblock);
            } else if (!(path != null)) {
              return codeblocks.push(codeblock);
            }
          });
        } else {
          codeblock = new Object();
          codeblock.filename = path;
          codeblock.code = response;
          codeblocks.push(codeblock);
        }
        return deferred.resolve(codeblocks);
      }
    });
    return deferred;
  };
  highlightCode = function(codeblocks) {
    return $.each(codeblocks, function(i, codeblock) {
      var codelines;
      codelines = codeblock.code.split('\n');
      return console.log(codelines);
    });
  };
  return insertCode = function(codeblocks, $target) {
    var dfd;
    dfd = $.Deferred();
    setTimeout(function() {
      console.log("retrieved from " + codeblocks, 'injected');
      return dfd.resolve('injected');
    }, 1000);
    return dfd;
  };
})(jQuery, window);
